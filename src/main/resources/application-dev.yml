server:
  port: 8080
spring:
  application:
    name: SpringBoot-Quartz
  main:
    # 设置定义 bean 可以被覆盖
    allow-bean-definition-overriding: true

  # 数据源配置，数据从 common 文件提取
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${public.spring.datasource.host}:${public.spring.datasource.port}/test?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2b8
    username: ${public.spring.datasource.username}
    password: ${public.spring.datasource.password}

    #driver-class-name:springBoot2.x 后驱动程序通过SPI自动注册，并且通常不需要手动加载驱动程序类。
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      initial-size: 5   #线程池初大小
      min-idle: 5       #线程池最小空闲连接
      max-active: 2000  #线程池最大连接数
      # 配置获取连接等待超时的时间
      max-wait: 60000
     # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      max-pool-prepared-statement-per-connection-size: 20
      # SpringBoot 2.x 此处记得去掉 log4j
      filters: stat,wall
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 配置监控服务器
      stat-view-servlet:
        login-username: admin
        login-password: toor
        reset-enable: false
        url-pattern: /druid/*
        # 添加IP白名单
        #allow:
        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高
        #deny:
      web-stat-filter:
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤格式，一定要加上 ""，否则会报错
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"

  # quartz定时任务
  quartz:
    # 定时任务自启动
    auto-startup: true
    # 用于Quartz集群,启动时更新已存在的Job
    overwrite-existing-jobs: true
    # 定时任务启动延迟（秒）
    startup-delay: 10
    # 持久化方式：jdbc数据库
    job-store-type: jdbc
    jdbc:
      # 初始化Quartz表结构,项目第一次启动配置程 ALWAYS,然后改成 NEVER 否则已生成的job会被初始化掉
      initialize-schema: ALWAYS
    properties:
      org:
        quartz:
          scheduler:
            # 调度器实例名称
            instanceName: DefaultQuartzScheduler
            # 调度器实例id
            instanceId: AUTO
            #如果您希望Quartz Scheduler通过RMI作为服务器导出本身，则将“rmi.export”标志设置为true。
            #在同一个配置文件中为'org.quartz.scheduler.rmi.export'和'org.quartz.scheduler.rmi.proxy'指定一个'true'值是没有意义的,如果你这样做，'export '选项将被忽略
            rmi:
              export: false
              proxy: false
            wrapJobExecutionInUserTransaction: false
          # 任务持久化配置
          jobStore:
            # 持久化到数据库
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 数据库中 quartz 表的表名前缀
            tablePrefix: QRTZ_
            # 数据源跟随 SpringBoot
            dataSource: ${spring.datasource}
            # 是否使用集群，如果部署该项目应用到多个服务器上面，Job会在多个服务器上面执行，
            # 但同一个Job只会在某个服务器上面执行，即如果服务器A在某个时间执行了某个Job,则其他服务器如B,C,D在此时间均不会执行此Job。
            # 即不会造成该Job被多次执行。
            isClustered: true
            # 集群检查间隔（毫秒）
            clusterCheckinInterval: 20000
            #在被认为“misfired”(失火)之前，调度程序将“tolerate(容忍)”一个Triggers(触发器)将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）
            misfireThreshold: 5000
            useProperties: false
            # 在拉取待job即将触发的triggers时上锁，避免的重复调度
            acquireTriggersWithinLock: true
          # job工作线程池
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            # 并发个数  如果你只有几个工作每天触发几次 那么1个线程就可以,如果你有成千上万的工作，每分钟都有很多工作 那么久需要50-100之间.
            # 只有1到100之间的数字是非常实用的
            threadCount: 60
            # 优先级 默认值为5
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true


#  kafka:
#    producer:
#      # kafka 集群
#      bootstrap-servers:
#      # 发送失败后的重复发送次数
#      retries: 3
#      # 一次最多发送数据量
#      batch-size: 16384
#      # 批处理缓冲区大小：32M
#      buffer-memory: 33554432
#    consumer:
#      # kafka 集群
#      bootstrap-servers:
#      # 自动提交的间隔时间 ms
#      auto-commit-interval: 100
#      # 是否开启自动提交
#      enable-auto-commit: false
#      # 批量消费一次最大拉取的数据量
#      max-poll-records:
#      # 最早未被消费的offset
#      auto-offset-reset: earliest
#      # 所属消费者组 id
#      group-id:

# Swagger 开关，true：开/false：关
swagger:
  enable: true

# 开启 mybatis 查询日志
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
